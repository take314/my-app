AWSTemplateFormatVersion: "2010-09-09"
Description: pipeline for my-app

Parameters:
  OAuthToken:
    Type: String
    NoEcho: true

Resources:

  IAMManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-${CodeDeployApplication}Pipeline"
      Path: "/service-role/"
      PolicyDocument: |
        {
            "Statement": [
                {
                    "Action": [
                        "iam:PassRole"
                    ],
                    "Resource": "*",
                    "Effect": "Allow",
                    "Condition": {
                        "StringEqualsIfExists": {
                            "iam:PassedToService": [
                                "cloudformation.amazonaws.com",
                                "elasticbeanstalk.amazonaws.com",
                                "ec2.amazonaws.com",
                                "ecs-tasks.amazonaws.com"
                            ]
                        }
                    }
                },
                {
                    "Action": [
                        "codecommit:CancelUploadArchive",
                        "codecommit:GetBranch",
                        "codecommit:GetCommit",
                        "codecommit:GetRepository",
                        "codecommit:GetUploadArchiveStatus",
                        "codecommit:UploadArchive"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "codedeploy:CreateDeployment",
                        "codedeploy:GetApplication",
                        "codedeploy:GetApplicationRevision",
                        "codedeploy:GetDeployment",
                        "codedeploy:GetDeploymentConfig",
                        "codedeploy:RegisterApplicationRevision"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "codestar-connections:UseConnection"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "elasticbeanstalk:*",
                        "ec2:*",
                        "elasticloadbalancing:*",
                        "autoscaling:*",
                        "cloudwatch:*",
                        "s3:*",
                        "sns:*",
                        "cloudformation:*",
                        "rds:*",
                        "sqs:*",
                        "ecs:*"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "lambda:InvokeFunction",
                        "lambda:ListFunctions"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "opsworks:CreateDeployment",
                        "opsworks:DescribeApps",
                        "opsworks:DescribeCommands",
                        "opsworks:DescribeDeployments",
                        "opsworks:DescribeInstances",
                        "opsworks:DescribeStacks",
                        "opsworks:UpdateApp",
                        "opsworks:UpdateStack"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "cloudformation:CreateStack",
                        "cloudformation:DeleteStack",
                        "cloudformation:DescribeStacks",
                        "cloudformation:UpdateStack",
                        "cloudformation:CreateChangeSet",
                        "cloudformation:DeleteChangeSet",
                        "cloudformation:DescribeChangeSet",
                        "cloudformation:ExecuteChangeSet",
                        "cloudformation:SetStackPolicy",
                        "cloudformation:ValidateTemplate"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "codebuild:BatchGetBuilds",
                        "codebuild:StartBuild",
                        "codebuild:BatchGetBuildBatches",
                        "codebuild:StartBuildBatch"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "devicefarm:ListProjects",
                        "devicefarm:ListDevicePools",
                        "devicefarm:GetRun",
                        "devicefarm:GetUpload",
                        "devicefarm:CreateUpload",
                        "devicefarm:ScheduleRun"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "servicecatalog:ListProvisioningArtifacts",
                        "servicecatalog:CreateProvisioningArtifact",
                        "servicecatalog:DescribeProvisioningArtifact",
                        "servicecatalog:DeleteProvisioningArtifact",
                        "servicecatalog:UpdateProduct"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "cloudformation:ValidateTemplate"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ecr:DescribeImages"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "states:DescribeExecution",
                        "states:DescribeStateMachine",
                        "states:StartExecution"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "appconfig:StartDeployment",
                        "appconfig:StopDeployment",
                        "appconfig:GetDeployment"
                    ],
                    "Resource": "*"
                }
            ],
            "Version": "2012-10-17"
        }


  IAMRole:
    Type: "AWS::IAM::Role"
    DependsOn: IAMManagedPolicy
    Properties:
      Path: "/service-role/"
      RoleName: !Sub "${CodeDeployApplication}PipelineRole"
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codepipeline.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      ManagedPolicyArns:
      - !Sub "arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSCodePipelineServiceRole-${AWS::Region}-${CodeDeployApplication}Pipeline"

  IAMRole2:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${CodeDeployApplication}CodeDeployRole"
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codedeploy.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
      Description: "Allows CodeDeploy to call AWS services such as Auto Scaling on your behalf."

  CodePipelinePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub "${CodeDeployApplication}Pipeline"
      RoleArn: !GetAtt IAMRole.Arn
      ArtifactStore:
        Location: !Ref ArtifactStoreBucket
        Type: "S3"
      Stages:
      -
        Name: "Source"
        Actions:
        -
          Name: "Source"
          ActionTypeId:
            Category: "Source"
            Owner: "ThirdParty"
            Provider: "GitHub"
            Version: "1"
          Configuration:
            Branch: "main"
            OAuthToken: !Ref OAuthToken
            Owner: "take314"
            PollForSourceChanges: "true"
            Repo: "my-app"
          OutputArtifacts:
          -
            Name: "SourceArtifact"
          Region: !Ref AWS::Region
          Namespace: "SourceVariables"
          RunOrder: 1
      -
        Name: "Build"
        Actions:
        -
          Name: "Build"
          ActionTypeId:
            Category: "Build"
            Owner: "AWS"
            Provider: "CodeBuild"
            Version: "1"
          Configuration:
            ProjectName: !Sub "${CodeDeployApplication}Build"
          InputArtifacts:
          -
            Name: "SourceArtifact"
          OutputArtifacts:
          -
            Name: "BuildArtifact"
          Region: !Ref AWS::Region
          Namespace: "BuildVariables"
          RunOrder: 1
      -
        Name: "Deploy"
        Actions:
        -
          Name: "Deploy"
          ActionTypeId:
            Category: "Deploy"
            Owner: "AWS"
            Provider: "CodeDeploy"
            Version: "1"
          Configuration:
            ApplicationName: !Ref CodeDeployApplication
            DeploymentGroupName: !Sub "${CodeDeployApplication}DeployGroup"
          InputArtifacts:
          -
            Name: "BuildArtifact"
          Region: !Ref AWS::Region
          Namespace: "DeployVariables"
          RunOrder: 1

  CodeDeployApplication:
    Type: "AWS::CodeDeploy::Application"
    Properties:
      ApplicationName: "my-app"
      ComputePlatform: "Server"

  CodeDeployDeploymentGroup:
    Type: "AWS::CodeDeploy::DeploymentGroup"
    DependsOn: IAMRole2
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub "${CodeDeployApplication}DeployGroup"
      DeploymentConfigName: "CodeDeployDefault.AllAtOnce"
      ServiceRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${CodeDeployApplication}CodeDeployRole"
      AlarmConfiguration:
        Enabled: false
        IgnorePollAlarmFailure: false
      DeploymentStyle:
        DeploymentType: "IN_PLACE"
        DeploymentOption: "WITHOUT_TRAFFIC_CONTROL"
      Ec2TagSet: {}
      OnPremisesTagSet: {}

  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled